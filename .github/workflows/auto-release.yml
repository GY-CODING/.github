name: Auto Tag & Release

on:
  workflow_call:

jobs:
  tag-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Get current version from package.json
      id: version
      run: |
        VERSION=$(cat package.json | jq -r '.version')
        echo "current_version=$VERSION" >> $GITHUB_ENV
      shell: bash

    - name: Determine next version
      id: next_version
      run: |
        # Incrementa automáticamente la versión (minor, patch o major)
        CURRENT_VERSION=${{ env.current_version }}
        # Extrae la parte de la versión actual
        MAJOR=$(echo $CURRENT_VERSION | cut -d '.' -f 1)
        MINOR=$(echo $CURRENT_VERSION | cut -d '.' -f 2)
        PATCH=$(echo $CURRENT_VERSION | cut -d '.' -f 3)

        # Usa un sistema para decidir si es un patch, minor o major (aquí asumimos patch por defecto)
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

        echo "next_version=$NEW_VERSION" >> $GITHUB_ENV
      shell: bash

    - name: Create new tag
      id: tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Crea el tag con la nueva versión
        git tag v${{ env.next_version }}
        git push origin v${{ env.next_version }}

    - name: Create a new GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.next_version }}
        release_name: "Release v${{ env.next_version }}"
        body: "🚀 Nueva release automática para la versión v${{ env.next_version }}."
        draft: false
        prerelease: false
